---
import { slugifyStr } from "@/utils/slugify";
import type { CollectionEntry } from "astro:content";
import Datetime from "./Datetime.astro";
import Tag from "./Tag.astro"; // Import the Tag component

export interface Props {
  href?: string;
  frontmatter: CollectionEntry<"blog">["data"];
  secHeading?: boolean;
}

const { href, frontmatter, secHeading = true } = Astro.props;

const { title, pubDatetime, modDatetime, description, tags } = frontmatter;

const headerProps = {
  style: { viewTransitionName: slugifyStr(title) },
  class: "text-lg font-medium decoration-dashed hover:underline",
};

// 从标签生成随机颜色并返回完整CSS变量值
const getCardAccent = (title: string) => {
  const colors = ["primary", "secondary", "success", "info", "warning", "danger", "accent"];
  const hash = title.split("").reduce((acc, char) => char.charCodeAt(0) + acc, 0);
  const colorName = colors[hash % colors.length];
  return colorName;
};

---

<li class="my-6 rounded-xl p-6 relative overflow-hidden backdrop-blur-sm transition-all duration-300 
    hover:shadow-lg hover:shadow-accent/20 group bg-gradient-to-br from-muted/30 to-background 
    border border-border/40 hover:border-accent/50 card animate-fade-in">
  
  <div class={`absolute top-0 left-0 w-1 h-full accent-bar accent-${getCardAccent(title)}
    group-hover:scale-y-105 transition-all duration-500 group-hover:glow-sm`}></div>
  
  <div class="relative z-10">
    <a
      href={href}
      class="inline-block text-lg font-medium text-accent decoration-dashed underline-offset-4 
        focus-visible:no-underline focus-visible:underline-offset-0 transition-all duration-300 
        group-hover:text-accent group-hover:scale-[1.02] transform origin-left"
    >
      {
        secHeading ? (
          <h2 {...headerProps} class="group-hover:text-accent transition-colors duration-300">{title}</h2>
        ) : (
          <h3 {...headerProps} class="group-hover:text-accent transition-colors duration-300">{title}</h3>
        )
      }
    </a>
  </div>
  
  <Datetime pubDatetime={pubDatetime} modDatetime={modDatetime} />
  <p class="mt-2 text-foreground/90 group-hover:text-foreground transition-colors duration-300">{description}</p>
  
  {tags && (
    <ul class="mt-3 flex flex-wrap gap-2">
      {tags.map(tag => (
        <Tag tag={slugifyStr(tag)} tagName={tag} />
      ))}
    </ul>
  )}
</li>

<style>
  /* Card styles with enhanced animations */
  .card {
    position: relative;
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  }
  
  .card::before {
    content: '';
    position: absolute;
    inset: 0;
    z-index: -1;
    background: radial-gradient(
      circle at top right,
      color-mix(in srgb, var(--color-accent) 10%, transparent),
      transparent 70%
    );
    opacity: 0;
    transition: opacity 0.5s ease;
    border-radius: inherit;
  }
  
  .card:hover::before {
    opacity: 1;
  }
  
  /* Accent bars with enhanced visuals */
  .accent-bar {
    background: linear-gradient(to bottom, var(--color-accent), color-mix(in srgb, var(--color-accent) 70%, transparent));
  }
  
  .accent-primary {
    background: linear-gradient(to bottom, var(--color-primary), color-mix(in srgb, var(--color-primary) 70%, transparent));
  }
  
  .accent-secondary {
    background: linear-gradient(to bottom, var(--color-secondary), color-mix(in srgb, var(--color-secondary) 70%, transparent));
  }
  
  .accent-success {
    background: linear-gradient(to bottom, var(--color-success), color-mix(in srgb, var(--color-success) 70%, transparent));
  }
  
  .accent-info {
    background: linear-gradient(to bottom, var(--color-info), color-mix(in srgb, var(--color-info) 70%, transparent));
  }
  
  .accent-warning {
    background: linear-gradient(to bottom, var(--color-warning), color-mix(in srgb, var(--color-warning) 70%, transparent));
  }
  
  .accent-danger {
    background: linear-gradient(to bottom, var(--color-danger), color-mix(in srgb, var(--color-danger) 70%, transparent));
  }
  
  .accent-accent {
    background: linear-gradient(to bottom, var(--color-accent), color-mix(in srgb, var(--color-accent) 70%, transparent));
  }
  
  /* Glow effects */
  .glow-sm {
    box-shadow: 0 0 15px var(--color-accent);
  }
  
  /* Card entry animation */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animate-fade-in {
    animation: fadeIn 0.5s ease-out forwards;
    animation-delay: calc(var(--animation-index, 0) * 100ms);
  }
  
  /* Apply animation delay to cards based on position */
  li:nth-child(1) { --animation-index: 1; }
  li:nth-child(2) { --animation-index: 2; }
  li:nth-child(3) { --animation-index: 3; }
  li:nth-child(4) { --animation-index: 4; }
  li:nth-child(5) { --animation-index: 5; }
  li:nth-child(n+6) { --animation-index: 6; }
</style>

<script>
  // Add intersection observer to trigger animations when cards come into view
  document.addEventListener('astro:page-load', () => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-fade-in');
          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.1 });
    
    document.querySelectorAll('.card').forEach(card => {
      observer.observe(card);
      // Initially hide cards until they come into view
      if (card instanceof HTMLElement) {
        card.style.opacity = '0';
      }
    });
  });
</script>
