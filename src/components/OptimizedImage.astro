---
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";

export interface Props {
  src: string | ImageMetadata;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: "eager" | "lazy";
  decoding?: "sync" | "async" | "auto";
  sizes?: string;
}

const {
  src,
  alt,
  width,
  height,
  class: className = "",
  loading = "lazy",
  decoding = "async",
  sizes = "100vw",
} = Astro.props;

const isImageMetadata = typeof src === "object" && src !== null && "src" in src;
---

<figure class="image-container">
  {
    isImageMetadata ? (
      <Image
        src={src as ImageMetadata}
        alt={alt}
        width={width}
        height={height}
        loading={loading}
        decoding={decoding}
        class={`optimized-image ${className}`}
        sizes={sizes}
      />
    ) : (
      <img
        src={src as string}
        alt={alt}
        width={width}
        height={height}
        loading={loading}
        decoding={decoding}
        class={`optimized-image ${className}`}
        sizes={sizes}
      />
    )
  }
  {alt && <figcaption class="sr-only">{alt}</figcaption>}
</figure>

<style>
  .image-container {
    margin: 1.5rem 0;
    position: relative;
  }

  .optimized-image {
    width: 100%;
    height: auto;
    display: block;
    border-radius: 0.25rem;
  }

  /* Fallback for older browsers or if JavaScript is disabled */
  .optimized-image.blur-up {
    filter: blur(5px);
    transition: filter 400ms;
  }

  .optimized-image.blur-up.lazyloaded {
    filter: blur(0);
  }
</style>

<script>
  // Optional: Add JavaScript for progressive image loading effects
  // This script will run only in the browser
  document.addEventListener("DOMContentLoaded", () => {
    const images = document.querySelectorAll(".optimized-image");

    if ("loading" in HTMLImageElement.prototype) {
      // Browser supports native lazy loading
      images.forEach(img => {
        if (img instanceof HTMLImageElement) {
          img.loading = "lazy";
        }
      });
    } else {
      // Fallback for browsers that don't support native lazy loading
      // You could import a lazy loading library here
    }
  });
</script>
